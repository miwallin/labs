const express = require("express");
const fs = require('fs');
const path = require('path');
const todos = require('./data/todo-list.json');
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

const app = express();
const PORT = process.env.PORT || 9999;
app.use(express.static(path.join(__dirname, 'public')));

const options = {
  definition: {
    openapi: '3.0.0',
    servers: [
      {
        url: 'http://localhost:9999'
      }
    ],
    info: {
      title: 'Todo API',
      version: '1.0.0',
    },
  },
  apis: ['index.js'], // files containing annotations as above
};
const swaggerOptions = swaggerJsdoc(options);
app.use('/api/docs', swaggerUi.serve, swaggerUi.setup(swaggerOptions));

/**
 * @swagger
 * components:
 *  schemas:
 *   todo:
 *    type: object
 *    properties:
 *     task_id:
 *      type: integer
 *      description: Autogenerated ID
 *     task_title:
 *      type: string
 *      description: Title of the Todo
 *     task_content:
 *      type: string
 *      description: More detailed description of the Todo
 *     completion_status:
 *      type: boolean
 *      description: Completion status of the Todo
 *    example:
 *     task_id: 1667573832629
 *     task_title: new task
 *     task_content: some specifics on how this task is to be done
 *     completion_status: false
 *   error:
 *    type: object
 *    properties:
 *     error:
 *      type: boolean
 *      description: error status
 *     msg:
 *      type: string
 *      description: an error message
 *    example:
 *     error: true
 *     msg: This went wrong with your request.
 *   success:
 *    type: object
 *    properties:
 *     success:
 *      type: boolean
 *      description: success status
 *     msg:
 *      type: string
 *      description: a success message
 *    example:
 *     success: true
 *     msg: Your request was a success.
 */

/**
 * @swagger
 * /api/read-todos:
 *  get:
 *   summary: Returns a list of all todos
 *   responses:
 *    200:
 *     description: list of todos
 *     content:
 *      application/json:
 *       schema:
 *        type: array
 *        items:
 *         $ref: '#/components/schemas/todo'
 */
app.get('/api/read-todos', ( req, res ) => {
    res.send(getTodos());
});

/**
 * @swagger
 * /api/write-todos:
 *  post:
 *   summary: Creates a new todo
 *   requestBody:
 *    description: todo to be created
 *    content:
 *     application/json: 
 *      schema:
 *       type: object
 *       $ref: '#/components/schemas/todo'
 *   responses:
 *    200:
 *     description: returns the created todo
 *     content:
 *      application/json:
 *       schema:
 *        type: object
 *        $ref: '#/components/schemas/todo'
 */
app.use(express.json());
app.post('/api/write-todos', (req, res) => {
    const listTodos = getTodos();
    const newTodo = req.body;
    listTodos.push(newTodo);
    saveTodos(listTodos);
    console.log(newTodo);
    res.send(newTodo);
});

/**
 * @swagger
 * /api/update-todos:
 *  put:
 *   summary: Updates the completion status of a todo
 *   requestBody:
 *    description: todo to be updated
 *    content:
 *     application/json: 
 *      schema:
 *       type: object
 *       $ref: '#/components/schemas/todo'
 *   responses:
 *    200:
 *     description: todo successfully updated
 *     content:
 *      application/json:
 *       schema:
 *        type: object
 *        $ref: '#/components/schemas/success'
 *    409:
 *     description: could not find todo to update
 *     content:
 *      application/json:
 *       schema:
 *        type: object
 *        $ref: '#/components/schemas/error'
 */
app.put('/api/update-todos', (req, res) =>{
  const tID = req.body.task_id;
  const toUpdate = req.body;
  const listTodos = getTodos();
  const filterList = listTodos.filter( todo => todo.task_id != tID);
  if (listTodos.length === filterList.length) {
    return res.status(409).send({error: true, msg: 'Todo does not exist'});
  }
  filterList.push(toUpdate);
  saveTodos(filterList);
  res.send({success: true, msg: 'Todo updated successfully'});
});

/**
 * @swagger
 * /api/delete-todos/{task_id}:
 *  delete:
 *   summary: Deletes a todo
 *   parameters:
 *    - in: path
 *      name: task_id
 *      required: true
 *      description: id of todo to be deleted
 *      schema:
 *       type: integer
 *   responses:
 *    200:
 *     description: todo successfully deleted
 *     content:
 *      application/json:
 *       schema:
 *        type: object
 *        $ref: '#/components/schemas/success'
 *    409:
 *     description: todo does not exist
 *     content:
 *      application/json:
 *       schema:
 *        type: object
 *        $ref: '#/components/schemas/error'
 */
app.delete('/api/delete-todos/:task_id', (req, res) => {
  const todoId = req.params.task_id;
  console.log(todoId);
  const listTodos = getTodos();
  const filterList = listTodos.filter( todo => todo.task_id != todoId);
  if (listTodos.length === filterList.length) {
    return res.status(409).send({error: true, msg: 'Todo does not exist'});
  }
  saveTodos(filterList);
  res.send({success: true, msg: 'Todo removed successfully'});
});

const saveTodos = (data) => {
  const saveData = JSON.stringify(data);
  fs.writeFileSync('./data/todo-list.json', saveData);
}

const getTodos = () => {
  const getData = fs.readFileSync('./data/todo-list.json');
  return JSON.parse(getData);
}

app.listen(PORT, () => {
  console.log(`Todo list listening on port ${PORT}!`);
});